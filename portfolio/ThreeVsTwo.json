{"metadata":{"layout":"portfolio_page","title":"Three Vs Two","Tech":["Csound"]},"content":"<p><strong>Genre:</strong> Generative</p>\n<p><strong>Length:</strong> As long as you leave it running.</p>\n<p><strong>Influenced by:</strong></p>\n<ul>\n<li>Iain McCurdy</li>\n</ul>\n<hr>\n<p><a href=\"http://ashva.la/assets/ThreeVsTwo.mp3%22\">Download the song</a></p>\n<p><a href=\"http://ashva.la/assets/ThreeVsTwo.csd%22\">Download the Csound file</a></p>\n<hr>\n<h3>About:</h3>\n<p>This piece was written for Dr. Richard Boulanger’s Csound class from the Summer of 2015. I was inspired by Iain McCurdy’s haikus, but, I wasn’t entirely satisfied with just recreating something that often generated a drone, I wanted to use an array of notes that would be used in the piece of music.</p>\n<p>The code was written in Csound. It does not use any notelist events in the score and relies on schedulers inside of Csound to trigger note events.</p>\n<hr>\n<h3>Global Arrays:</h3>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">gkarr</span>[] fillarray <span class=\"hljs-number\">60</span>,<span class=\"hljs-number\">63</span>,<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">67</span>,<span class=\"hljs-number\">72</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">61</span>\n<span class=\"hljs-attribute\">gkarrbass</span>[] fillarray <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">43</span>\n</code></pre>\n<p>gkarr is initalized as an array and filled with a bunch of MIDI notes that can be parsed by our instrument.</p>\n<p>gkarrbass is just a bunch of lower register notes that kinda sound coherent in context.</p>\n<hr>\n<h3>The master scheduler:</h3>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">schedule</span> <span class=\"hljs-string\">\"scheduler\"</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">schedule</span> <span class=\"hljs-string\">\"scheduler\"</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">schedule</span> <span class=\"hljs-string\">\"scheduler\"</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">schedule</span> <span class=\"hljs-string\">\"del\"</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">90</span>\n<span class=\"hljs-attribute\">schedule</span> <span class=\"hljs-string\">\"rev\"</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">90</span>\n</code></pre>\n<p>This master scheduler that just sits in the orc section allows Csound to schedule the piece exactly for a minute and thirty seconds.</p>\n<p>This can easily be made much more haiku like - just by setting <code>del</code> and <code>rev's</code> schedule to -1, or using a plugin opcode such as <code>alwayson</code> for the scheduler instrument.</p>\n<hr>\n<h3>The scheduler instrument:</h3>\n<p>Code:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">instr</span> scheduler\t\t\n\t<span class=\"hljs-attribute\">kTrig</span> metro <span class=\"hljs-number\">3</span>\t\t\n\t<span class=\"hljs-attribute\">kmetro</span> = metro(<span class=\"hljs-number\">3</span>)\t\t\n\t<span class=\"hljs-attribute\">ktrig_bass</span> = metro(<span class=\"hljs-number\">2</span>)\t\t\t\t\n\t<span class=\"hljs-attribute\">kmidi_note_t</span> = trandom(kmetro, <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>)\n\t<span class=\"hljs-attribute\">kmidinote</span> = gkarr[int(kmidi_note_t)]\n\t<span class=\"hljs-attribute\">kmidinote_bass</span> = gkarrbass[int(kmidi_note_t)]\n\t<span class=\"hljs-attribute\">schedkwhen</span>  kTrig, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, kmidinote,<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">01</span>\n\t<span class=\"hljs-attribute\">schedkwhen</span>  ktrig_bass, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, int(kmidinote_bass), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">005</span>\n<span class=\"hljs-attribute\">endin</span>\n</code></pre>\n<p><code>kTrig</code> sends a trigger (or 1) three times every second to the scheduler.</p>\n<p><code>kmetro</code> is used to get a random number. <code>kmetro</code> also operates at 3Hz.</p>\n<p><code>ktrig_bass</code> is used to trigger a bass notes 2 times every second.</p>\n<p><code>trandom</code> is used to generate a random number based on a trigger signal from a metro.</p>\n<hr>\n<h3>The actual instrument:</h3>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">instr</span> <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-attribute\">ifreq</span> = cpsmidinn(p<span class=\"hljs-number\">4</span>)\n\t<span class=\"hljs-attribute\">idur</span> = p<span class=\"hljs-number\">3</span>\n\t<span class=\"hljs-attribute\">ifreq11</span> = cpsmidinn(p<span class=\"hljs-number\">4</span>)\n\t<span class=\"hljs-attribute\">ifreq12</span> = cpsmidinn(p<span class=\"hljs-number\">4</span>) * <span class=\"hljs-number\">4</span>\n\t<span class=\"hljs-attribute\">iQ11</span>    = <span class=\"hljs-number\">120</span>\n\t<span class=\"hljs-attribute\">iQ12</span>    = <span class=\"hljs-number\">10</span>\n\t<span class=\"hljs-attribute\">iamp</span> \t  = p<span class=\"hljs-number\">6</span>\n\t<span class=\"hljs-attribute\">ifreq21</span> = cpsmidinn(p<span class=\"hljs-number\">4</span>) * <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">7</span>\n\t<span class=\"hljs-attribute\">ifreq22</span> = cpsmidinn(p<span class=\"hljs-number\">4</span>) * <span class=\"hljs-number\">8</span>\n\t<span class=\"hljs-attribute\">iQ21</span>    = <span class=\"hljs-number\">8</span>\n\t<span class=\"hljs-attribute\">iQ22</span>    = <span class=\"hljs-number\">10</span>\n\t<span class=\"hljs-attribute\">ashock</span>  mpulse  <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-attribute\">aexc1</span>  = mode(ashock,ifreq<span class=\"hljs-number\">11</span>,iQ<span class=\"hljs-number\">11</span>)\n\t<span class=\"hljs-attribute\">aexc1</span> = aexc<span class=\"hljs-number\">1</span>*iamp\n\t<span class=\"hljs-attribute\">aexc2</span> = mode(ashock,ifreq<span class=\"hljs-number\">12</span>,iQ<span class=\"hljs-number\">12</span>)\n\t<span class=\"hljs-attribute\">aexc2</span> = aexc<span class=\"hljs-number\">2</span>*iamp\n\t<span class=\"hljs-attribute\">aexc</span> = (aexc<span class=\"hljs-number\">1</span>+aexc<span class=\"hljs-number\">2</span>)/<span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-attribute\">aexc</span> limit aexc,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">5</span>*iamp\n\n\t<span class=\"hljs-attribute\">ares1</span>  mode aexc,ifreq<span class=\"hljs-number\">21</span>,iQ<span class=\"hljs-number\">21</span>\n\t<span class=\"hljs-attribute\">ares2</span>  mode aexc,ifreq<span class=\"hljs-number\">22</span>,iQ<span class=\"hljs-number\">22</span>\n\t<span class=\"hljs-attribute\">ares</span> = (ares<span class=\"hljs-number\">1</span>+ares<span class=\"hljs-number\">2</span>)\n\t<span class=\"hljs-attribute\">aresOut</span> streson ares, ifreq<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">7</span>\n\t<span class=\"hljs-attribute\">irevsend</span> = p<span class=\"hljs-number\">5</span>\n\n\t<span class=\"hljs-attribute\">if</span> irevsend = <span class=\"hljs-number\">1</span> then\n\t\t<span class=\"hljs-attribute\">garvbL</span> += (aresOut * <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8</span>)\n\t\t<span class=\"hljs-attribute\">garvbR</span> += (aresOut * <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8</span>)\n\t<span class=\"hljs-attribute\">else</span>\n\t\t<span class=\"hljs-attribute\">garvbL</span> = (aresOut * <span class=\"hljs-number\">0</span>)\n\t\t<span class=\"hljs-attribute\">garvbR</span> = (aresOut * <span class=\"hljs-number\">0</span>)\n\t<span class=\"hljs-attribute\">endif</span>\n\n\t<span class=\"hljs-attribute\">gadelL</span> += (aresOut * <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8</span>)\n\t<span class=\"hljs-attribute\">gadelR</span> += (aresOut * <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8</span>)\n\t<span class=\"hljs-attribute\">outs</span> aresOut,aresOut\n<span class=\"hljs-attribute\">endin</span>\n</code></pre>\n<p>Line by line analysis:</p>\n<ul>\n<li><code>ifreq</code> is the midi note number in Hz or CPSs.</li>\n<li><code>ifreq11</code> is also just the CPS conversion</li>\n<li><code>ifreq12</code> is the CPS conversion multiplied by 4</li>\n<li><code>ifreq21</code> is the CPS conversion multiplied by 1.7</li>\n<li><code>ifreq22</code> is the CPS conversion multiplied by 8</li>\n</ul>\n<p>the Q values are determined so that one can get a slightly more metallic sound, this is achieved by using low Q values.</p>\n<p><code>ashock</code> is used as a instigator of that sound - To create the impulse, so to speak.</p>\n<p>This particular instrument is based on the <code>mode</code> example that the csound manual has.</p>\n<p><code>mode</code> is an opcode used to simulate the mass-spring-damper filtering system that's used in physical modeling synthesis.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2b/Damped_spring.gif\" alt=\"mass-spring-damper system\"></p>\n<p>We use ifreq11/12 and the related Q values(iq11/12) to determine the impulse state of the system</p>\n<p>We use <code>limit</code> to generate a contact condition. when the limit sees a zero, it essentially behaves as if the contact state is lost.</p>\n<p>This creates the mass part of the equation</p>\n<p>The remaining two mode instances are used to create the spring and decay/damp condition.</p>\n<p>I used a string resonator to create a slightly more resonant sound.</p>\n<p><code>irevsend</code> is a variable used to determine whether or not a reverb send happens. If set to 1, it will go to the reverb instrument, otherwise it won't.</p>\n<p>The instrument is always going have a delay on it. Because it sounds nicer.</p>\n<hr>\n<h3>Delay and reverb instruments:</h3>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">instr</span> del\n\t<span class=\"hljs-attribute\">adelL</span> init <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-attribute\">adelR</span> init <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-attribute\">kfdbk</span> linseg <span class=\"hljs-number\">0</span>, p<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">95</span>\n\t<span class=\"hljs-attribute\">adelL</span> delay gadelL + (adelL * kfdbk), <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">5</span>\n\t<span class=\"hljs-attribute\">adelR</span> delay gadelR + (adelR * kfdbk), <span class=\"hljs-number\">3</span>\n\t<span class=\"hljs-attribute\">adelOutL</span> moogvcf adelL, <span class=\"hljs-number\">210</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">7</span>\n\t<span class=\"hljs-attribute\">adelOutR</span> moogvcf adelR, <span class=\"hljs-number\">3000</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">6</span>\n\t<span class=\"hljs-attribute\">outs</span> adelOutL, adelOutR\n\t<span class=\"hljs-attribute\">gadelL</span> = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-attribute\">gadelR</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">endin</span>\n\n<span class=\"hljs-attribute\">instr</span> rev\n\t<span class=\"hljs-attribute\">kfdbk</span> linseg <span class=\"hljs-number\">0</span>, p<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">88</span>, p<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-attribute\">arvbL</span>, arvbR reverbsc garvbL, garvbR,kfdbk, <span class=\"hljs-number\">1000</span>\n\t<span class=\"hljs-attribute\">outs</span> arvbL, arvbR\n\t<span class=\"hljs-attribute\">garvbL</span> = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-attribute\">garvbR</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">endin</span>\n</code></pre>\n<p><code>del</code> is a stereo delay instrument.</p>\n<p>The left signal is delayed by 1.5 seconds and the right signal is delayed by 3 second.</p>\n<p>I used the trick from the manual, related to coloring the delayed outputs, to create the delay sound.</p>\n<p><code>rev</code> is a stereo reverb that uses the reverbsc opcode. It's nothing fancy.</p>\n<p>They use linsegs to create the feeling of an increased feedback/fadeout towards the end.</p>\n<hr>"}